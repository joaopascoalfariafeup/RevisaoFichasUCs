# Ficha a avaliar - versão em português

## Unidade curricular
Desenvolvimento de Software de Larga Escala

## Curso responsável
Mestrado em Engenharia Informática e Computação

## Créditos ECTS
6

## Ano
1

## Semestre
1

## Objetivos
<p>A unidade curricular tem como objectivo principal desenvolver nos estudantes as seguintes competências:</p>
<ol>
<li><span style="font-weight: 400;"> Aplicação de um processo ágil a todo o ciclo de vida de um sistema de software real de complexidade e escala média-elevada. </span></li>
<li><span style="font-weight: 400;">Utilização de práticas de desenvolvimento ágil.</span></li>
<li><span style="font-weight: 400;"> Utilização de ferramentas para automação e suporte às práticas usadas durante todo o seu ciclo de vida, desde os requisitos até à utilização.</span></li>
<li><span style="font-weight: 400;"> Utilização de infraestruturas e serviços de software de grande escala, para desenvolvimento e instalação de soluções com forte integração de componentes e aplicações.</span></li>
<li><span style="font-weight: 400;">Desenvolvimento de trabalho colaborativo integrando diversos intervenientes (equipa, clientes, especialistas externos), promovendo negociação e decisões partilhadas sobre o projeto.</span></li>
<li><span style="font-weight: 400;"> Consolidação dos conhecimentos e competências anteriormente adquiridos em diversas disciplinas relacionadas com desenvolvimento de software, em especial: Engenharia de Software, Bases de Dados e Interfaces com o Utilizador.</span></li>
</ol>

## Resultados de aprendizagem e competências
<p>Os estudantes serão capazes de definir e aplicar um processo de desenvolvimento de um sistema de software de média-larga escala, utilizando práticas ágeis, ferramentas tipicas de desenvolvimento de software, num ambiente multi-equipa.</p>

## Pré-requisitos e co-requisitos
Engenharia de software.

## Programa
<ol><br /><li><span style=&quot;font-weight: 400;&quot;> Introdução aos processos de desenvolvimento de software de larga escala e complexidade média-elevada. </span></li><br /><li><span style=&quot;font-weight: 400;&quot;>Revisão sobre métodos e práticas ágeis mais populares para sistemas de software de larga escala (p.e. Scrum/LeSS, Kanban e XP).</span></li><br /><li><span style=&quot;font-weight: 400;&quot;> Estudo e experimentação de ferramentas de desenvolvimento de software para automação e suporte às práticas usadas durante todo o seu ciclo de vida, desde os requisitos até à utilização.</span></li><br /><li><span style=&quot;font-weight: 400;&quot;> Estudo de arquiteturas, infraestruturas e serviços de software de grande escala, para desenvolvimento e instalação de soluções com forte integração de componentes e aplicações.</span></li><br /><li><span style=&quot;font-weight: 400;&quot;>Práticas de trabalho em equipa integrando diversos intervenientes (equipa, clientes, especialistas externos).</span></li><br /><li><span style=&quot;font-weight: 400;&quot;> Seminários em tópicos e tendências de maior atualidade, em termos de investigação ou prática, na academia ou indústria, incluindo: Agile at Large, DevOps, Agile Quality, Microservices.</span></li><br /></ol>

## Métodos de ensino e atividades de aprendizagem
<p><span style="font-weight: 400;">As aulas teóricas serão usadas para a exposição dos processos de desenvolvimento de software, ferramentas e tecnologias adotadas na unidade curricular. Serão ainda usadas algumas das aulas teóricas para atividades de avaliação individual e colectiva, de acordo com calendário da unidade curricular.<br /></span><span style="font-weight: 400;"><br /></span><span style="font-weight: 400;">As aulas de laboratório serão usadas para o acompanhamento e desenvolvimento de projetos, através do uso dos sistemas, linguagens e ferramentas escolhidos para a implementação do sistema. </span><span style="font-weight: 400;"><br /></span><span style="font-weight: 400;"><br />O projeto é organizado em iterações, cada uma com entregas de artefatos concretos, com componentes de avaliação individual, equipa e multi-equipa.</span><span style="font-weight: 400;"><br /></span><span style="font-weight: 400;"><br /></span><span style="font-weight: 400;">Tipo de Avaliação: Avaliação distribuída sem exame final.</span><span style="font-weight: 400;"><br /></span><span style="font-weight: 400;"><br /></span></p>

## Tipo de avaliação
Avaliação distribuída sem exame final

## Componentes de Avaliação
- Participação presencial: 10.0 %
- Trabalho escrito: 30.0 %
- Trabalho laboratorial: 60.0 %

## Componentes de Ocupação
- Elaboração de projeto: 90.0 horas
- Elaboração de relatório/dissertação/tese: 20.0 horas
- Frequência das aulas: 2.0 horas
- Trabalho de investigação: 2.0 horas

## Fórmula de cálculo da classificação final
<span style=&quot;font-weight: 400;&quot;>A classificação é baseada na avaliação contínua de diversas atividades do processo e artefactos produzidos, ao longo de várias iterações: </span><span style=&quot;font-weight: 400;&quot;><br /></span><span style=&quot;font-weight: 400;&quot;>- Arranque do projeto (Sprint 0) - 15%; </span><span style=&quot;font-weight: 400;&quot;><br />- Desenvolvimento do projeto (Sprints 1-4) - 45%; <br /></span><span style=&quot;font-weight: 400;&quot;>- Resultados finais do projeto - 30%</span><span style=&quot;font-weight: 400;&quot;><br /></span><span style=&quot;font-weight: 400;&quot;>- Avaliação contínua do desempenho individual - 10%<br /><br /><strong>Nota:</strong> Estudantes com classificações finais iguais ou superiores a 19 valores podem também ser sujeitos à avaliação adicional de uma prova oral ou de um trabalho escrito sobre o projeto e os conteúdos e práticas da unidade curricular.<br /><br /><br /></span>

## Obtenção de frequência
<p>É exigida uma nota mínima de 40% a qualquer dos itens de avaliação discriminados na fórmula de cálculo da classificação final.</p>

## Melhoria de classificação
<p>Melhorias de classificação envolverão um trabalho adicional, contendo todas as componentes atrás referidas, e uma prova oral adicional; melhorias de classificação pedidas no ano lectivo seguinte envolverão a realização de todos os trabalhos previstos para os estudantes desse ano lectivo.</p>



# Ficha a avaliar - versão em inglês

## Unidade curricular
Large Scale Software Development

## Curso responsável
Master in Informatics and Computing Engineering

## Créditos ECTS
6

## Ano
1

## Semestre
1

## Objetivos
<p>The course unit has the key goal to develop the following skills in the students:</p>
<ol>
<li><span style="font-weight: 400;"> Apply an agile process to the full software development life cycle of a real software system of medium-large complexity and scale.</span></li>
<li><span style="font-weight: 400;"> Apply agile development practices.</span></li>
<li><span style="font-weight: 400;">Use tools to automate and support the practices used along the lifecycle, from the requirements to usage.</span></li>
<li><span style="font-weight: 400;"> Use of infrastructures and services for large scale software systems to develop and deploy solutions with strong integration of components and applications.</span></li>
<li><span style="font-weight: 400;"> Development of collaborative work integrating different participants (team, customers, external experts), promoting design negotiation and participatory decision-making. </span></li>
<li><span style="font-weight: 400;">Consolidation of knowledge and skills acquired in several courses related with software development, in particular: Software Engineering, Databases, and User Interfaces.</span></li>
</ol>
<p><br /><br /><br /></p>

## Resultados de aprendizagem e competências
<p>The students will be capable to define and apply one development process to build a medium-large scane software system, using agile practices, typical software development tools, in a multi-team environment.</p>

## Pré-requisitos e co-requisitos
Software engineerig.

## Programa
<ol><br /><li><span style=&quot;font-weight: 400;&quot;> Introduction to development processes for large scale software systems and medium-large complexity. </span></li><br /><li><span style=&quot;font-weight: 400;&quot;>Review of the most popular agile methods and practices for large scale software systems (e.g. Scrum/LeSS, Kanban e XP).</span></li><br /><li><span style=&quot;font-weight: 400;&quot;>Survey and experimentation of software development tools to automate and support the practices used along the software development life cycle, from requirements to usage.</span></li><br /><li><span style=&quot;font-weight: 400;&quot;> Overview of architectures, infrastructures and services for large scale software, to develop and deploy of solutions with heavy integration of components and applications.</span></li><br /><li><span style=&quot;font-weight: 400;&quot;> Teamwork practices integrating several intervenients (team, customers, external experts).</span></li><br /><li><span style=&quot;font-weight: 400;&quot;> Seminars on hot topics and trends, in terms of research and practice, academy and industry, including: Agile at Large, DevOps, Agile Quality, Microservices.</span></li><br /></ol>

## Métodos de ensino e atividades de aprendizagem
<p><span style="font-weight: 400;">Theoretical classes are used to the presentation and supervision of the projects and for the exposition of software developing tools and of used tools. </span><span style="font-weight: 400;"><br /></span><span style="font-weight: 400;">Laboratory classes are used to the development and tracking of the project, using the systems, languages and tools chosen to implement the system. </span><span style="font-weight: 400;"><br /></span><span style="font-weight: 400;">The development of the project is divided in iterations, each with their own concrete deliverables.</span></p>
<p><span style="font-weight: 400;"> </span><span style="font-weight: 400;"><br /></span><span style="font-weight: 400;">Type of evaluation: Distributed evaluation without final exam.</span></p>

## Tipo de avaliação
Distributed evaluation without final exam

## Componentes de Avaliação
- Participação presencial: 10.0 %
- Trabalho escrito: 30.0 %
- Trabalho laboratorial: 60.0 %

## Componentes de Ocupação
- Elaboração de projeto: 90.0 hours
- Elaboração de relatório/dissertação/tese: 20.0 hours
- Frequência das aulas: 2.0 hours
- Trabalho de investigação: 2.0 hours

## Fórmula de cálculo da classificação final
Formula of evaluation: the final grade is based on the continuous evaluation of several activities and produced artifacts, along several iterations:<br />- Project kickoff (Sprint 0) - 15% <br />- Project development (Sprints 1-4) - 45% <br />- Project final results  - 30% <br />- Continuous individual evaluation - 10%<br /><br /><strong>Note:</strong> Students with final grades equal to or greater than 19 may also be subject to the additional evaluation of an oral exam or of a written work about the project, contents, and practices used during the course unit.

## Obtenção de frequência
<p>The student must have the minimum grade of 40% in any of the items of the formula for calculating the <span class="VIiyi" lang="en"><span class="JLqJ4b ChMk0b" data-language-for-alternatives="en" data-language-to-translate-into="pt" data-phrase-index="0" data-number-of-phrases="1"><span class="Q4iAWc">final grade.</span></span></span></p>

## Melhoria de classificação
<p>To improve the classification the student must make another assignment with all the items mentioned before, and an extra oral exam; Improvements of the classification requested in the following academic year will require doing all the assignments forecasted for the students of that academic year.</p>

