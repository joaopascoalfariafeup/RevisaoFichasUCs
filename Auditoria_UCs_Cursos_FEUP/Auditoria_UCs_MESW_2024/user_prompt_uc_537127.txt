# Ficha a avaliar - versão em português

## Unidade curricular
Arquitetura e Desenho de Software

## Curso responsável
Mestrado em Engenharia de Software

## Créditos ECTS
6

## Ano
1

## Semestre
1

## Objetivos
<p><strong>ENQUADRAMENTO</strong> À medida que os sistemas de software aumentam de dimensão e de complexidade torna-se cada vez mais importante compreendê-los a níveis de abstracção mais elevados. A arquitectura de um sistema de software descreve a sua estrutura global em termos dos seus componentes, das propriedades externas desses componentes e das suas interrelações. Para sistemas de média e grande dimensão a escolha adequada da arquitectura assume uma importância crucial para o sucesso do seu desenvolvimento.</p>
<p><strong>OBJETIVOS ESPECÍFICOS</strong> A disciplina de Arquitecturas de Sistemas de Software tem como objectivo principal introduzir os conceitos de arquitecturas de software, padrões de desenho e tópicos directamente relacionados, tais como o de componentes de software. Pretende ensinar a desenhar, compreender e avaliar arquitecturas de sistemas de software, tanto ao nível de abstracção de macro-arquitectura como de micro-arquitectura e assim familiarizar os alunos com os conceitos fundamentais de arquitectura de software, as propriedades e aplicabilidade dos diferentes estilos de arquitectura existentes, os padrões de desenho mais populares, componentes de software, arquitecturas reutilizáveis e as relações destes conceitos todos com a reutilização de software.</p>
<p><strong>DISTRIBUIÇÃO PERCENTUAL</strong> Componente Científica: 50% Componente Tecnológica 50%.</p>

## Resultados de aprendizagem e competências
<p>No final da disciplina os alunos deverão ser capazes de:</p>
<p>&#8226; Reconhecer os principais estilos de arquitectura existentes para sistemas de software.<br />&#8226; Descrever uma arquitectura de forma precisa.<br />&#8226; Idealizar diferentes arquitecturas alternativas para resolver um mesmo problema e avaliar de forma justificada qual a melhor, quer em termos de desenho, quer em termos de reutilização.<br />&#8226; Reconhecer e compreender diversos padrões de desenho.<br />&#8226; Conhecer e aplicar diversos métodos e técnicas de reutilização de software.<br />&#8226; Construir um sistema de software de média dimensão de acordo com uma especificação de requisitos e uma especificação de arquitectura, seleccionando e aplicando padrões de desenho e utilizando um método de desenvolvimento baseado em componentes.<br />&#8226; Utilizar definições e ferramentas de desenvolvimento existentes para tornar mais expedita a realização das tarefas anteriores.</p>

## Pré-requisitos e co-requisitos
Os alunos devem ter conhecimentos e experiência anterior em desenvolvimento de software, programação orientada por objectos, e engenharia de software.

## Programa
<strong>Introdução</strong><br />&#8226; Desenho de software: conceitos, princípios e abordagens fundamentais.<br />&#8226; O que é o desenho e arquitectura de software?<br />&#8226; A importância da arquitectura de software.<br /><br /><strong>Desenho orientado a Objetos</strong><br />&#8226; Propriedades Desejáveis de Software Orientado a Objetos<br />&#8226; Os princípios SOLID <br />&#8226; Code Smells e Refatoração<br /><br /><strong>Padrões de Software</strong><br />&#8226; As origens dos padrões de software<br />&#8226; Tipos de padrões de software: padrões de arquitectura, padrões de desenho, estruturas idiomáticas.<br />&#8226; Exemplos de Padrões de Desenho: GoF patterns.<br />&#8226; Refatoração para Padrões<br />&#8226; Exemplos de Padrões de Arquitectura: POSA patterns.<br /><br /><strong>Arquiteturas de Software Evolucionárias</strong><br />&#8226; Atributos de qualidades<br />&#8226; Evolução arquitetural guiada<br />&#8226; Funções objetivo arquiteturais<br /><br /><strong>Mais Arquiteturas de Software</strong><br />&#8226; Arquiteturas de Microserviços<br />&#8226; Arquiteturas orientadas a logs<br />&#8226; Arquitetura Hexagonal

## Métodos de ensino e atividades de aprendizagem
As aulas terão uma componente teórica, utilizada tanto para a exposição formal dos principais conhecimentos da disciplina como para a apresentação final e discussão dos projectos desenvolvidos pelos alunos ao longo do semestre. Por forma a focar a atenção dos alunos nos tópicos principais, serão propostas pequenas questões de resposta facultativa e livre sobre os tópicos em estudo para desenvolvimento fora de aulas. Ao longo do semestre os alunos terão oportunidade de colocar em prática os conhecimentos transmitidos através de pequenos exercícios e desenvolvimento incremental de um projecto de média dimensão. As questões, os exercícios e o projecto conjuntamente incentivarão os alunos a complementar os conhecimentos transmitidos com outros conhecimentos resultantes de pesquisas individuais efectuadas sobre os conteúdos da disciplina.

## Tipo de avaliação
Avaliação distribuída com exame final

## Componentes de Avaliação
- Exame: 40.0 %
- Participação presencial: 10.0 %
- Trabalho prático ou de projeto: 50.0 %

## Componentes de Ocupação
- Estudo autónomo: 30.0 horas
- Frequência das aulas: 36.0 horas
- Trabalho laboratorial: 90.0 horas

## Fórmula de cálculo da classificação final
Avaliação Distribuída = Projeto * 0.5 + Participação Individual * 0.1<br />Avaliação Final = Avaliação Distribuída * 0.60 + Exame * 0.40<br /><br />Todas as componentes têm uma classificação mínima de 40%.

## Obtenção de frequência
Não exceder os limites de faltas e participar ativamente nos trabalhos práticos que estarão sujeitos a avaliação.<br /><br />Os alunos dispensados das regras de frequência devem, em períodos de tempo definidos com o professor, apresentar a evolução dos seus trabalhos e participar nas sessões finais das apresentações como alunos regulares.

## Melhoria de classificação
&#8226; As classificações obtidas no trabalho prático podem ser melhoradas na edição seguinte da UC<br />&#8226; A classificação do exame pode ser melhorada em exame de recurso.



# Ficha a avaliar - versão em inglês

## Unidade curricular
Software Architecture and Design

## Curso responsável
Master in Software Engineering

## Créditos ECTS
6

## Ano
1

## Semestre
1

## Objetivos
<p><strong>BACKGROUND</strong> As the dimension and complexity of software systems grows, it becomes more important to understand them at more advanced abstraction levels. The architecture of a software system describes the global structure in terms of its components, external proprieties and its interrelations. For medium and big-dimension systems, to chose the right architecture becomes crucial to the success of its development.</p>
<p><strong>SPECIFIC AIMS</strong> This course aims to introduce the concepts of software architectures, design patterns and topics directly related, such as the software components&#8217; one. Furthermore, it aims to teach how to design, understand and evaluate software systems architectures both at the level of abstraction of macro-architecture and micro-architecture. All this to familiarize the students with the fundamental concepts of software architecture, the proprieties and applicability of the different architecture styles, the most popular design patterns, software components, reusable architectures and the relations of all these concepts with the software reuse.</p>
<p><strong>PERCENTAGE DISTRIBUTION</strong> Scientific component: 50% Technologic componente: 50.</p>

## Resultados de aprendizagem e competências
<p>At the end of the year, the students must be able to:</p>
<p>&#8226; Recognize the main architecture styles existent for software systems.<br />&#8226; Make a precise description of an architecture.<br />&#8226; Idealize different alternative architectures to solve the same problem and evaluate (justifying) which is the best one in terms of design and reuse.<br />&#8226; Recognize and understand several design patterns.<br />&#8226; Understand and apply several methods and techniques of software reuse.<br />&#8226; Build a medium-dimension software system following a requirement and architecture specification, selecting and applying design patterns and using a component-based development method.<br />&#8226; Use development definitions and tools to make the previous tasks more efficient.</p>

## Pré-requisitos e co-requisitos
The students should have previous knowledge and experience on software development, object-oriented programming and software engineering.

## Programa
<strong>Introduction</strong><br />&#8226; Software design: fundamental concepts, principles and approaches.<br />&#8226; What is software design and architecture?<br />&#8226; The importance of software design and architecture.<br /><br /><strong>Object-Oriented Design</strong><br />&#8226; Desirable Properties of Object-Oriented Software<br />&#8226; The SOLID Principles<br />&#8226; Code smells and Refactoring<br /><br /><strong>Software Patterns</strong><br />&#8226; The origins of software patterns<br />&#8226; Types of software patterns: architectural patterns, design patterns, idiomatic structures.<br />&#8226; Examples of Design Patterns: GoF patterns.<br />&#8226; Refactoring to Patterns<br />&#8226; Examples of Architecture Patterns: POSA patterns<br /><br /><strong>Evolutionary Software Architecture</strong><br />&#8226; Quality attributes<br />&#8226; Guided evolutionary architecture<br />&#8226; Architectural fitness functions<br /><br /><strong>More Software Architectures</strong><br />&#8226; Microservice Architectures<br />&#8226; Log-oriented Architectures<br />&#8226; Hexagonal Architectures

## Métodos de ensino e atividades de aprendizagem
The classes will have a theoretical component that will provide formal exposition of contents and final presentation and discussion of the projects developed by the students during the semester. As to focus the students&#8217; attention on the main topics, little questions on those topics will be developed out of classes. During the semester, the students will have the chance to put the knowledge transmitted in practice by doing short exercises and incremental development of a medium-dimension project. The questions, exercises and project will encourage the students to complement the knowledge transmitted with other resultant of the individual research done on the course contents.

## Tipo de avaliação
Distributed evaluation with final exam

## Componentes de Avaliação
- Exame: 40.0 %
- Participação presencial: 10.0 %
- Trabalho prático ou de projeto: 50.0 %

## Componentes de Ocupação
- Estudo autónomo: 30.0 hours
- Frequência das aulas: 36.0 hours
- Trabalho laboratorial: 90.0 hours

## Fórmula de cálculo da classificação final
Distributed Evaluation= Project * 0.5 + Individual Participation * 0.1<br />Final Evaluation = Distributed Evaluation * 0.60 + Exam * 0.40<br /><br />All components have a minimum grade of 40%.

## Obtenção de frequência
<p>Not exceed the absence limits and actively participate in the practical works that will be subject to evaluation. <br /><br />Students dispensed from attendance rules must, in time periods defined with teachers, present the evolution of their works, and participate in the final presentations sessions as the regular students. </p>

## Melhoria de classificação
&#8226; The grades obtained in the practical work can be improved in the next edition of the curricular unit<br />&#8226; Exam classification can be improved in the appeal exam.

