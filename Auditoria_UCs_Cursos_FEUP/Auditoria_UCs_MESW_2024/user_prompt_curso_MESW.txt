# Curso a analisar
Mestrado em Engenharia de Software

## Descrição
Acreditação pela A3ES
O ciclo de estudo encontra-se acreditado pela Agência de Avaliação e Acreditação do Ensino Superior (A3ES).Mais informação pode ser encontrada nos
relatórios produzidos pela A3ES
.
O Mestrado em Engenharia de Software (MESW) tem por objetivo oferecer formação científica e profissional avançada em Engenharia de Software e é projetado para profissionais que buscam atualizar as suas competências, bem como, para aqueles que pretendem adquirir novas competências e conhecimentos atuais em Engenharia de Software.
Para mais informações consultar:
https://paginas.fe.up.pt/~estudar/mesw/
Objetivos
O objetivo do Mestrado em Engenharia de Software (MESW) é promover a excelência da qualificação em aspetos avançados e nucleares da Engenharia de Software, desde os seus fundamentos teóricos até à integração de tecnologias informáticas nas organizações.
Áreas de Especialização
O plano curricular do MESW permite que os estudantes adquiram, entre outras, competências nas seguintes áreas:
Fundamentos e paradigmas em Engenharia de Software
Especificação, desenho e construção de software
Questões de segurança em Engenharia de Software
Compreensão, evolução, teste, validação e verificação de software
Inovação e empreendedorismo em Engenharia de Software
Competências Profissionais
Os graduados do MESW são profissionais absolutamente indispensáveis à indústria de software, capazes de gerir projetos de grande dimensão, complexidade e restrições impostas pelo mercado. São profissionais capazes de estar no topo da hierarquia técnica da indústria de software mundial.
O MESW define objetivos de aprendizagem, operacionalizados pelas suas unidades curriculares e verificados através da análise do percurso académico dos estudantes, tendo como referência o perfil necessário para profissionais capazes de, dada uma necessidade, aplicar uma abordagem sistemática, disciplinada e quantificável conducente ao desenvolvimento, operação e manutenção de um sistema de software que satisfaça os requisitos funcionais e os atributos de qualidade. Os graduados do MESW deverão ser capazes de:
Trabalhar eficientemente numa equipa de projeto para desenvolver software de qualidade;
Detetar conflitos nos requisitos e definir soluções nos limites de custo, tempo, conhecimentos existentes e idiossincrasias organizacionais;
Projetar soluções de Engenharia de Software atendendo a restrições éticas, sociais, legais, tecnológicas e económicas;
Compreender e valorizar a análise de viabilidade, negociação, hábitos de trabalho eficientes, liderança, comunicação e estudo continuado;
Aprender novos modelos, técnicas e tecnologias de desenvolvimento de software;
Analisar os pontos fortes e fracos da tecnologia de desenvolvimento de software, fomentando a mudança nas organizações;
Liderar o trabalho em várias áreas do desenvolvimento de software.
Saídas Profissionais
O curriculum do MESW está ancorado em problemas do mundo real com uma componente de projetos de desenvolvimento em equipa para "aprender fazendo". O MESW visa assim formar profissionais altamente especializados capazes de assumir a liderança de projetos de Engenharia de Software complexos e de grande dimensão com exigências de qualidade.
Informações
CONTACTOS
Secretariado da MESW
E:
mesw@fe.up.pt
L:
Sala I 012A
M
:
Faculdade de Engenharia da Universidade do Porto
Departamento de Engenharia Informática
Rua Dr. Roberto Frias, s/n
4200-465 Porto, Portugal
H:
Segunda a sexta | 10h00 - 12h00 / 14h30 - 16h30
T
+351 22 5082134| +351 22 0413905

# Unidade curricular: Teste, Verificação e Validação de Software

## Ano: 1
## Semestre: 1
## ECTS: 6.0
## Objetivos: <span style=&quot;font-weight: 400;&quot;>O objetivo desta unidade curricular é: a familiarização com a terminologia usada em testes de software; a sensibilização com as questões relacionadas com a qualidade de software; e exploração e prática de diferentes técnicas de Verificação e Validação (V&amp;V) necessárias para a construção de sistemas de software de qualidade.</span>

## Resultados de aprendizagem: <p><span style="font-weight: 400;">No final da Unidade curricular os estudantes devem ser capazes de projetar e executar um plano de Verificação e Validação (V&amp;V). Mais especificamente, espera-se que os estudantes sejam capazes de:</span></p>
<p><span style="font-weight: 400;">- Planear uma estratégia de Verificação e Validação.</span></p>
<p><span style="font-weight: 400;">- Selecionar as melhores técnicas e ferramentas de teste de software para um determinado contexto.</span></p>
<p><span style="font-weight: 400;">- Projetar e desenvolver testes em diferentes níveis (e.g., unidade, integração, sistema e aceitação).</span></p>
<p><span style="font-weight: 400;">- Testar situações excepcionais (e.g., "boundary value analysis").</span></p>
<p><span style="font-weight: 400;">- Refletir sobre as limitações e qualidade dos testes desenvolvidos.</span></p>
<p><span style="font-weight: 400;">- Usar métricas para avaliar a qualidade dos testes (e.g., cobertura de instruções).</span></p>
<span style="font-weight: 400;">- Escrever código de teste sustentável, evitando problemas conhecidos (e.g., </span><em><span style="font-weight: 400;">flakiness</span></em><span style="font-weight: 400;">, ilegível, dependente, </span><em><span style="font-weight: 400;">fat</span></em><span style="font-weight: 400;"> testes, etc.).</span>

# Unidade curricular: Princípios e Paradigmas de Engenharia de Software

## Ano: 1
## Semestre: 1
## ECTS: 6.0
## Objetivos: <p>Esta unidade curricular  tem como objetivo principal abordar conceitos e técnicas de Engenharia de Software transversais às várias fases do ciclo de vida do desenvolvimento de software (Requisitos, Arquitetura, Desenho, Construção, Teste, Evolução) e que têm tratamento especializado noutras UCs do 1º ou 2º semestre do curso.</p>

## Resultados de aprendizagem: <p>O1. Descrever o âmbito, história, importância e desafios da engenharia de software.</p>
<p>O2. Explicar os conceitos de processo e ciclo de vida do desenvolvimento de software (SDLC) e descrever as fases e modelos mais comuns do SDLC.</p>
<p>O3. Diferenciar métodos preditivos, adaptativos (ágeis) e híbridos em engenharia de software.</p>
<p>O4. Descrever e comparar processos de software usados na indústria como RUP, Scrum e XP.</p>
<p>O5. Compreender a importância da modelação de sistemas e as principais notações usadas, como UML, SysML e BPMN.</p>
<p>O6. Aplicar técnicas de modelação estrutural e comportamental e de análise de modelos.</p>
<p>O7.  Compreender o âmbito e objetivos da gestão de projetos e descrever algumas técnicas de planeamento, estimação, monitorização e controlo.</p>
<p>O8. Descrever os desafios e boas práticas de formação e gestão de equipas em projetos de software.</p>
<p>O9. Discutir questões éticas e legais, responsabilidades profissionais e o impacto da engenharia de software na sociedade.</p>

## Pré-requisitos e co-requisitos: Conhecimentos e experiência de desenvolvimento de software.

# Unidade curricular: Compreensão e Evolução de Software

## Ano: 1
## Semestre: 2
## ECTS: 6.0
## Objetivos: <ul><br /><li>Adquirir compete&#770;ncias que permitam lidar com os processos de evoluc&#807;a&#771;o e manutenc&#807;a&#771;o de software, numa fase po&#769;s-projeto;</li><br /><li>Conhecer e aplicar te&#769;cnicas de engenharia reversa, re-engenharia e evoluc&#807;a&#771;o em linhas de produtos de software;</li><br /><li>Identificar os desafios em torno da compreensa&#771;o e evoluc&#807;a&#771;o de software, o seu estado da arte e quais os soluc&#807;o&#771;es preconizadas pela comunidade.</li><br /></ul><br /><p><br /><br /></p>

## Resultados de aprendizagem: Os estudantes deverão adquirir as seguintes competências:<br /><br /><ul><br /><li>Identificar as necessidades de evolução de um sistema de software.</li><br /><li>Seleccionar/Definir qual o melhor processo de evolução a aplicar.</li><br /><li>Ser capaz de investigar/propor soluções para problemas de compreensão e evolução de software.</li><br /><li>Aplicar técnicas de evolução de software a projetos especificos. </li><br /></ul>

# Unidade curricular: Seminários em Engenharia de Software

## Ano: 2
## Semestre: 1
## ECTS: 6.0
## Objetivos: <p>O objetivo desta unidade curricular é apresentar, sob a forma de seminários independentes, um leque alargado de subtópicos de Engenharia de Software, que pela sua pertinência, em termos de investigação, inovação ou aplicação industrial, permitam aos estudantes preprarem-se melhor para a eventual realização de um trabalho de investigação cientifica ou aplicada numa área da Engenharia de Software.<br /><br />Pretende-se</p>
<ul>
<li>Familiarização com os processos, metodologias e práticas associados à investigação científica;</li>
<li>Refletir sobre o pensamento crítico e sobre a sua aplicação nas ciências.</li>
<li>Elaborar e apresentar um plano de um projecto de dissertação, incluindo o respectivo estado da arte, no tema selecionado.</li>
<li>Adquirir uma visão alargada de tópicos e subtópicos relevantes na área de Engenharia de Software.</li>
<li>Identificar a comunidade científica de referência numa área de investigação.</li>
</ul>

## Resultados de aprendizagem: <p>Espera-se que os estudantes ganhem familiaridade com a abrangente influência que o software tem nas suas várias áreas de aplicação, e o profundo impacto na qualidade de vida no indivíduo e na sociedade.</p>
<p>No final desta unidade curricular o estudante deverá ser capaz de:</p>
<ul>
<li class="level1">
<div class="li">Interpretar uma proposta de trabalho de investigação, refiná-la e descrevê-la.</div>
</li>
<li class="level1">Ser capaz de identificar a comunidade científica de referência numa determinada área de investigação.</li>
<li class="level1">Pesquisar e selecionar publicações em bases de dados de publicações científicas e outros tipos de publicação.</li>
<li class="level1">
<div class="li">Elaborar um plano de trabalhos e um calendário para uma dissertação de mestrado.</div>
</li>
<li class="level1">Escrever um estado da arte no tema de investigação escolhido com base na pesquisa bibliográfica.</li>
<li class="level1">
<div class="li">Comunicar e apresentar os resultados de investigação.</div>
</li>
<li class="level1">Ganhar familiaridade com a abrangente influência que o software tem nas suas várias áreas de aplicação, e o profundo impacto na qualidade de vida no indivíduo e na sociedade.</li>
</ul>

## Pré-requisitos e co-requisitos: Conhecimentos de desenvolvimento de software.

# Unidade curricular: Arquitetura e Desenho de Software

## Ano: 1
## Semestre: 1
## ECTS: 6.0
## Objetivos: <p><strong>ENQUADRAMENTO</strong> À medida que os sistemas de software aumentam de dimensão e de complexidade torna-se cada vez mais importante compreendê-los a níveis de abstracção mais elevados. A arquitectura de um sistema de software descreve a sua estrutura global em termos dos seus componentes, das propriedades externas desses componentes e das suas interrelações. Para sistemas de média e grande dimensão a escolha adequada da arquitectura assume uma importância crucial para o sucesso do seu desenvolvimento.</p>
<p><strong>OBJETIVOS ESPECÍFICOS</strong> A disciplina de Arquitecturas de Sistemas de Software tem como objectivo principal introduzir os conceitos de arquitecturas de software, padrões de desenho e tópicos directamente relacionados, tais como o de componentes de software. Pretende ensinar a desenhar, compreender e avaliar arquitecturas de sistemas de software, tanto ao nível de abstracção de macro-arquitectura como de micro-arquitectura e assim familiarizar os alunos com os conceitos fundamentais de arquitectura de software, as propriedades e aplicabilidade dos diferentes estilos de arquitectura existentes, os padrões de desenho mais populares, componentes de software, arquitecturas reutilizáveis e as relações destes conceitos todos com a reutilização de software.</p>
<p><strong>DISTRIBUIÇÃO PERCENTUAL</strong> Componente Científica: 50% Componente Tecnológica 50%.</p>

## Resultados de aprendizagem: <p>No final da disciplina os alunos deverão ser capazes de:</p>
<p>&#8226; Reconhecer os principais estilos de arquitectura existentes para sistemas de software.<br />&#8226; Descrever uma arquitectura de forma precisa.<br />&#8226; Idealizar diferentes arquitecturas alternativas para resolver um mesmo problema e avaliar de forma justificada qual a melhor, quer em termos de desenho, quer em termos de reutilização.<br />&#8226; Reconhecer e compreender diversos padrões de desenho.<br />&#8226; Conhecer e aplicar diversos métodos e técnicas de reutilização de software.<br />&#8226; Construir um sistema de software de média dimensão de acordo com uma especificação de requisitos e uma especificação de arquitectura, seleccionando e aplicando padrões de desenho e utilizando um método de desenvolvimento baseado em componentes.<br />&#8226; Utilizar definições e ferramentas de desenvolvimento existentes para tornar mais expedita a realização das tarefas anteriores.</p>

## Pré-requisitos e co-requisitos: Os alunos devem ter conhecimentos e experiência anterior em desenvolvimento de software, programação orientada por objectos, e engenharia de software.

# Unidade curricular: Gestão de Qualidade e Melhoria de Processos de Software

## Ano: 1
## Semestre: 2
## Grupo(s) de opção a que pertence: Unidades Curriculares Optativas - 1º Grupo
## ECTS: 6.0
## Objetivos: <p>Esta unidade curricular tem por objetivo dotar os estudantes de competências e capacidades para assumir papéis de liderança relacionados com a gestão de qualidade, garantia de qualidade, melhoria de processos e certificações de qualidade em organizações de desenvolvimento de software. </p>

## Resultados de aprendizagem: <p>No final desta unidade curricular pretende-se que os estudantes:</p>
O1. Reconheçam a importância da qualidade de produtos, processos e serviços de software e da sua gestão;<br /><br />O2. Conheçam e saibam aplicar boas práticas, métodos e normas para a avaliação, melhoria e certificação de processos de desenvolvimento de software nas organizações, como CMMI-DEV e ITmark;<br /><br />O3. Conheçam e saibam aplicar boas práticas, métodos e normas para a modelação de processos de software e a medição e análise de desempenho de processos, como SPEM e ISO/IEC 12207;<br /><br />O4. Conheçam e saibam aplicar boas práticas, métodos e normas para a avaliação, melhoria e certificação de processos de gestão de serviços nas organizações, como CMMI-SVC, ISO 20000 and ITIL;<br /><br />O5. Conheçam e saibam aplicar boas práticas, métodos e normas para a avaliação, melhoria e certificação de processos de gestão da segurança da informação nas organizações, como ISO 27001 e RGPD;<br /><br />O6. Conheçam e saibam aplicar boas práticas, métodos e normas para a medição de qualidade de produtos de software, como ISO 25023.

## Pré-requisitos e co-requisitos: Conhecimentos gerais sobre engenharia de software.

# Unidade curricular: Dissertação

## Ano: 2
## Semestre: None
## ECTS: 48.0
## Objetivos: <p>Nos termos do estipulado em normas específicas da FEUP, a caracterização de Dissertação é a seguinte: <br /><br />1. Trabalho individual de investigação e desenvolvimento, conducente à elaboração <br />de uma dissertação de natureza científica sobre um tema da área de conhecimento <br />do curso, ou visando a integração e aplicação à resolução de problemas complexos <br />de engenharia de conhecimentos, competências e atitudes adquiridos ao longo do <br />curso. <br /><br />2. Pode ser um trabalho de investigação ou de desenvolvimento tecnológico e <br />aplicação, envolvendo meios experimentais e/ou de simulação, que promova o <br />desenvolvimento de capacidades de iniciativa, de decisão, de inovação, de <br />pensamento criativo e crítico, num contexto de trabalho individual ou em grupo. <br /><br />3. Deve envolver a análise de situações novas, a recolha de informação pertinente, o<br /> desenvolvimento e selecção ou concepção das metodologias de abordagem e dos <br />instrumentos de resolução do problema proposto, a sua resolução, o exercício de <br />síntese e elaboração de conclusões, e a preparação de uma dissertação pertinente <br />sujeita a apresentação pública e discussão dos resultados. <br /><br />4. Pode ser realizado em ambiente académico ou académico e empresarial. Neste <br />caso os objectivos, natureza e forma de acompanhamento do trabalho devem ser <br />objecto de acordo prévio entre o estudante e os orientadores por parte da Faculdade <br />e da empresa, validado pelo Director do Curso, que garanta a satisfação dos <br />objectivos de natureza científica e pedagógica da unidade curricular, e proteja<br /> eventuais questões de confidencialidade por parte da empresa/instituição de <br />acolhimento.</p>

## Resultados de aprendizagem: <p>Trabalho individual de investigação e desenvolvimento, conducente à<br />elaboração de uma dissertação de natureza científica sobre um tema da<br />área de conhecimento do curso, ou visando a integração e aplicação à<br />resolução de problemas complexos de engenharia de conhecimentos,<br />competências e atitudes adquiridos ao longo do curso.<br />O trabalho pode ser de investigação ou de desenvolvimento tecnológico e<br />aplicação, envolvendo meios experimentais e/ou de simulação, que promova<br />o desenvolvimento de capacidades de iniciativa, de decisão, de inovação, de<br />pensamento criativo e crítico, num contexto de trabalho individual ou em<br />grupo.</p>

# Unidade curricular: Computação Orientada a Serviços e Nuvem

## Ano: 2
## Semestre: 1
## Grupo(s) de opção a que pertence: Unidades Curriculares Optativas - 2º Grupo
## ECTS: 6.0
## Objetivos: Conhecimentos de Engenharia de Software na Núvem, nomeadamente técnicas e processos de computação baseado em arquitecturas orientadas a serviços, com especial foco em ambientes sobre virtualização das camadas infraestruturais (vulgarmente conhecidos por Cloud). Pretende-se desenvolver as capacidades de gerir todo o ciclo de vida de software, desde a sua análise, desenho e concepção, até à implementação e manutenção, compreendendo as especificidades nos algoritmos, boas práticas e padrões utilizados neste domínio.

## Resultados de aprendizagem: No final da unidade curricular os estudantes devem ser capazes de desenhar e implementar software de larga escala em ambientes falíveis, sujeitos a picos elevados de stress, baixa latência, alta largura de banda e performance, compostos por um elevado número de componentes heterogéneos sujeitos a interferências e interacções imprevistas.

## Pré-requisitos e co-requisitos: Programação, Metodologias e Práticas de Engenharia de Software, Arquitectura e Desenho de Software, Testes e Validação de Software.

# Unidade curricular: Segurança em Engenharia de Software

## Ano: 1
## Semestre: 2
## ECTS: 6.0
## Objetivos: No final desta unidade curricular, pretende-se que os estudantes:<br />1. Reconheçam os problemas mais importantes de segurança em sistemas de computação baseados em software, respetivas causas e consequências, e reconheçam a importância da utilização de boas práticas de engenharia de software para a prevenção, deteção e mitigação desses problemas&#894;<br />2. Conheçam e sejam capazes de aplicar boas práticas genéricas e específicas para o desenvolvimento de<br />sistemas de software seguros nas diversas fases do ciclo de vida do software: captura de requisitos,<br />arquitetura e desenho, implementação, verificação e validação, distribuição, instalação e manutenção&#894;<br />3. Conheçam e sejam capazes de usar processos e ferramentas de engenharia de software especialmente<br />direcionados para questões de segurança&#894;<br />4. Conheçam normas relevantes para o desenvolvimento de sistemas de software seguros.

## Resultados de aprendizagem: Os conteúdos programáticos foram definidos em função dos objetivos e competências a serem adquiridos<br />pelos estudantes nesta UC. Os conteúdos programáticos incluem as abordagens consideradas estado da arte<br />em segurança em engenharia de software bem como técnicas específicas que conferem aos estudantes a<br />capacidade de selecionar de forma crítica o método apropriado a utilizar para, na prática, resolver problemas de segurança na engenharia de aplicações informáticas. Ao mesmo tempo, os estudantes serão capazes de interpretar e analisar o comportamento dos algoritmos e os resultados obtidos pelos mesmos. Para atingir os objectivos de aprendizagem, a UC irá abordar não só processos e algoritmos, bem como ferramentas off-the-shelf.

# Unidade curricular: Interação Pessoa Computador

## Ano: 2
## Semestre: 1
## Grupo(s) de opção a que pertence: Unidades Curriculares Optativas - 2º Grupo
## ECTS: 6.0
## Objetivos: <p>OBJECTIVO GERAL O principal objectivo da disciplina é o de preparar os estudantes para analisarem e projectarem as componentes interactivas dos sistemas, em particular da interface com os utilizadores, de uma forma adequada às suas necessidades, considerando o curto, médio e longo prazo.</p>
<p>OBJECTIVOS PARTICULARES</p>
<p>1. Preparar os estudantes para analisarem sistemas interactivos, em termos de um conjunto de parâmetros quantitativos e qualitativos.</p>
<p>2. Preparar os estudantes para utilizarem técnicas de estudo, observação e interrogação de utilizadores suportadas na compreensão do modelo conceptual dos utilizadores de sistemas.</p>
<p>3. Preparar os alunos para utilizarem um processo de construção de produtos interactivos baseado numa filosofia de projecto, incluindo a avaliação dos utilizadores, concepção, prototipagem, validação, construção e manutenção.</p>

## Resultados de aprendizagem: <p>No final desta unidade curricular, os estudantes deverão ser capazes de:<br /><br />- compreender a importância da interação com o utilizador no desenvolvimento de sistemas interativos<br /><br />- compreender os principais princípios de desenho de interação<br /><br />- conceber um sistema interativo utilizando uma abordagem centrada no utilizador, baseada na recolha e definição de requisitos, e na construção e avaliação de proptótipos. <br /><br />- fazer testes de usabilidade em sistemas já existentes, assim como propor e testar sugestões de melhoria.</p>

# Unidade curricular: Computação Móvel

## Ano: 1
## Semestre: 2
## Grupo(s) de opção a que pertence: Unidades Curriculares Optativas - 1º Grupo
## ECTS: 6.0
## Objetivos: <p>Os objetivos de aprendizagem visam a aquisição de conhecimento e a prática dos conceitos do projeto, arquitetura e implementação de aplicações, principalmente empresariais, em dispositivos móveis, utilizando plataformas e APIs de grande divulgação corrente.<br />São problemas e desafios a vencer a grande diversidade de capacidades, dimensões, formas de interação e componentes pouco usuais dos dispositivos móveis atuais. Fazem também parte dos objetivos o conhecimento e a prática do desenvolvimento de aplicações de razoável dimensão em diversos ambientes e a integração de serviços remotos.</p>

## Resultados de aprendizagem: <p>Os estudantes, uma vez levantada uma especificação de requisitos, deverão ser capazes de:<br />- escolher uma plataforma móvel, tecnologias, padrão da aplicação, 'framework' de programação, e a adequação às necessidades de armazenamento e comunicação, capaz de responder aos requisitos especificados;<br />- desenvolver e realizar aplicações e serviços locais e remotos, nas principais tecnologias;<br />- utilizar componentes menos usuais como os sensores e certas formas de comunicação;<br />- integrar serviços e aplicações disponíveis, mesmo de diferentes tecnologias.</p>

## Pré-requisitos e co-requisitos: São requisitos importantes o conhecimento e a prática do desenvolvimento de aplicações de razoável dimensão em ambiente Java e .NET e a integração de serviços remotos.

# Unidade curricular: Engenharia de Requisitos e Modelação de Software

## Ano: 1
## Semestre: 1
## ECTS: 6.0
## Objetivos: <p>Dotar os alunos com competências para planear, gerir e levar a cabo um processo de análise e especificação de requisitos de um sistema de software.</p>

## Resultados de aprendizagem: <p>No final da unidade curricular, os estudantes deverão ser capazes de:<br /><br />- conhecer os fundamentos básicos da engenharia de requisitos (importância no processo de desenvolvimento de software, classificação dos níveis de requisitos, tipos de requisitos, papel diferentes intervenientes);<br />- selecionar, descrever e aplicar múltiplas técnicas para levantamento de requisitos;<br />- escrever um documento de requisitos completo seguindo as melhores práticas e standards;<br />- validar e verificar requisitos (incluindo a realização de análises de risco);<br />- compreender como a validação formal pode ajudar no processo de validação de requisitos;<br />- descrever o processo de especificação de requisitos em metodologias ágeis;<br />- aplicar técnicas de gestão de requisitos;<br />- selecionar ferramentas para apoiar o processo de engenharia de requisitos.<br /><br /></p>

# Unidade curricular: Laboratório de Engenharia de Software

## Ano: 1
## Semestre: 1
## ECTS: 6.0
## Objetivos: <p>Aplicar um processo de Engenharia de Software ao desenvolvimento completo de um sistema de software real, ao longo do semestre, abrangendo a especificação de requisitos, arquitetura, implementação, integração, teste, documentação e demonstração.</p>
<p>Adquirir conhecimentos fundamentais e experiência sobre as práticas de desenvolvimento ágil de software: planeamento de iterações, testes unitários, refactoring, pattern-based design, autoria colectiva de código, programação em pares, integração contínua.</p>
<p>Utilizar ferramentas de desenvolvimento de software adequadas e que permitam o acompanhamento do desenvolvimento do produto durante todo o seu ciclo de vida.</p>
<p>Utilizar APIs e infraestruturas de software de grande escala, focando o desenvolvimento baseado em componentes e problemas de integração aplicacional.</p>
Desenvolver trabalho colaborativo, integrando outros intervenientes do projeto em decisões de desenho e planeamento e delegar, negociar e rever estas decisões em grupo.

## Resultados de aprendizagem: <p>No final da unidade curricular, o estudante deverá ser capaz de:<br /><br />- Aplicar um processo de Engenharia de Software ao desenvolvimento completo de um sistema de software real, nas suas várias fases, nomeadamente a especificação de requisitos, arquitetura, implementação, integração, teste, documentação e demonstração.</p>
<p>- Dominar e aplicar práticas de desenvolvimento ágil de software, entre elas: planeamento de iterações, testes unitários, refactoring, pattern-based design, autoria colectiva de código, programação em pares e  integração contínua.</p>
<p>- Seleccionar, adequar e utilizar ferramentas de desenvolvimento de software permitam o acompanhamento do desenvolvimento de um produto de software durante todo o seu ciclo de vida.</p>
<p>- Seleccionar, aferir e utilizar APIs e infraestruturas de software de grande escala, adequando-as, tendo em conta, o desenvolvimento baseado em componentes e os problemas de integração aplicacional.</p>
- Desenvolver trabalho colaborativo, integrando outros intervenientes do projeto em decisões de desenho e planeamento e delegar, negociar e rever estas decisões em grupo.

# Unidade curricular: Análise de Dados e Engenharia de Software

## Ano: 1
## Semestre: 2
## ECTS: 6.0
## Objetivos: <p><strong><span style="font-family: 'Trebuchet MS', Arial, sans-serif; font-size: 12px;"><span style="text-decoration: underline;">Enquadramento</span>: <br /></span></strong>Após uma época em que as diferentes empresas/instituições muito investiram na recolha de dados no âmbito da informatização das suas operações (por ex.: sensores, sistemas GPS), e em que muitas e variadas novas fontes de dados surgiram (por ex.: redes sociais), existe agora a necessidade de pôr esses dados ao serviço dessas empresas/instituições. O objetivo é ser capaz de extrair conhecimento desses dados de modo a melhorar a eficiência dos processos e ganhar vantagem competitiva. Uma das áreas em que esse evolução se tem observado de forma mais marcante é a Engenharia de Software. É desta necessidade que surge a Unidade Curricular de Análise de Dados e Engenharia de Software (ADES).</p>
<p> </p>
<p><strong><span style="font-family: 'Trebuchet MS', Arial, sans-serif; font-size: 12px;"><span style="text-decoration: underline;">Objetivos</span>:<br /></span></strong><span style="font-family: 'Trebuchet MS', Arial, sans-serif; font-size: 12px;">O estudante deve ser capaz de: </span><span style="font-family: 'Trebuchet MS', Arial, sans-serif; font-size: 12px;">desenvolver projetos simples de data mining (DM) descritivos e preditivos envolvendo as tarefas mais tradicionais: clustering, associação, classificação, e regressão. <br /><br /></span></p>

## Resultados de aprendizagem: <p><span style="font-family: 'Trebuchet MS', Arial, sans-serif; font-size: 12px;">Como resultado da aprendizagem, pretende-se que os estudantes sejam capazes de: <br />1. identificar problemas que podem ser resolvidos com DM; <br />2. seguir uma metodologia adequada para resolver problemas de DM simples; <br />3. compreender superficialmente o comportamento dos métodos envolvidos; <br />4. avaliar resultados, tanto numa perspective técnica como da do domínio da aplicação.<br /></span></p>

## Pré-requisitos e co-requisitos: <p><span style="font-family: 'Trebuchet MS', Arial, sans-serif; font-size: 12px;">Não sendo obrigatório ter frequentado nenhuma UC em concreto, é importante o estudante ter conhecimentos básicos de probabilidades e estatística.</span></p>

# Unidade curricular: Gestão de Projetos, Inovação e Empreendedorismo

## Ano: 1
## Semestre: 2
## ECTS: 6.0
## Objetivos: 1- ENQUADRAMENTO<br />O sucesso dos projetos e produtos de software depende não só do domínio das competências técnicas necessárias à realização das várias atividades do ciclo de vida do desenvolvimento do software, mas também, e cada vez mais, de um conjunto de capacidades e competências de gestão, comportamentais e comunicacionais, tais como competências de gestão de projeto (nas suas diversas variáveis de prazo, orçamento, âmbito, qualidade, recursos, etc.), capacidade de trabalhar em equipa, capacidade de relacionamento com clientes e capacidade de comunicação e marketing.<br /><br />2- OBJETIVOS ESPECÍFICOS<br /><br />No final da Unidade Curricular os estudantes deverão ser capazes de:<br />1.Identificar a necessidade de recurso à gestão de projetos bem como a importância do seu enquadramento estratégico;<br />2.Identificar os diferentes referenciais normativos e metodologias para a gestão de projetos; 3.Identificar e definir as áreas de processo e variáveis da gestão de projetos;<br />4. Aplicar metodologias e ferramentas de gestão de projeto e trabalho em equipa;<br />5. Aplicar conceitos e ferramentas de gestão da qualidade a projetos;<br />6. Identificar e gerir os riscos inerentes a um projeto.<br /><br /><br />3- CONHECIMENTO PRÉVIO<br />Domínio das competências técnicas necessárias ao desenvolvimento de projetos de software.<br />Ter frequentado com aproveitamento Laboratório de Desenvolvimento de Software (LDSO).<br /><br />4- DISTRIBUIÇÃO PERCENTUAL<br />Componente Científica: 50%<br />Componente Tecnológica 50%

## Resultados de aprendizagem: Desenvolver nos estudantes as capacidades de gestão de projectos de software, trabalho em equipa, inovação e empreendedorismo, habilitando-os assim a resolver a diversidade de problemas que tipicamente surgem em projectos deste tipo numa organização real.

